---
title: "Homework Assignment: Sentiment Analysis of Emma"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo       = TRUE, 
                      fig.align  = "center",
                      fig.height = 3, fig.width = 4)
ggplot2::theme_set(ggplot2::theme_bw() + ggplot2::theme(strip.background = ggplot2::element_rect(fill = "white")))
```

**Title**: Exploring Joyful Language in Jane Austen’s *Emma* using Tidytext

### **Instructions**

Complete the following exercises using the appropriate packages in R. Ensure that your solutions are optimized and use functional programming principles where applicable.

1.  Load the necessary libraries.
2.  Answer each question in separate R code chunks.
3.  Provide detailed explanations for your approach.
4.  Submit the rendered HTML file.

#### **Objective**:

Use the **`tidytext`** package and three different **sentiment lexicons** (`nrc`, `afinn`, `bing`) to explore **positive/joyful words** in *Emma* by Jane Austen. You will tokenize the text, apply sentiment filters, visualize frequent sentiment words using `ggplot2`, and create a word cloud.

### **Tasks**:

1.  **Data Preparation**

    -   Load the `austen_books()` dataset from the **`janeaustenr`** package.

    ```{r}

    library(janeaustenr)
    library(tidytext)
    library(dplyr)
    library(stringr)
    library(ggplot2)
    library(wordcloud)
    library(tidyr)
    ```

    -   Group by book and detect chapter boundaries using regex.
    -   Create `linenumber` and `chapter` columns.

    The "group by" function is not meaningful unless we apply some form of aggregation. With that in mind I applied a filter for Emma instead since austen_books() already has the books labelled. I then detected chapter boundaries using Regex, and assigned them to a column. I then created linenumbers based on the row numbers since the data was already organized by row.

    ```{r}
    # 
    emma_text <- austen_books() %>%
      filter(book == "Emma") %>%
      mutate(linenumber = row_number(),
             chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]", ignore_case = TRUE))))

    head(emma_text)
    ```

2.  **Tokenization**

    -   Use `unnest_tokens()` to tokenize text into individual words.
    -   Explain briefly **why we name the output column `word`** (include this as a comment in your script).

```{r}
# We name the column `word` because sentiment lexicons also use `word` as their key, allowing for seamless joins between the lexicons and our tokenized dataset.
emma_words <- emma_text %>%
  unnest_tokens(word, text)

head(emma_words)

```

1.  **Sentiment Analysis**

    -   Filter joy/positive words from **each** of the three sentiment lexicons:

        -   `nrc` (joy)
        -   `afinn` (positive scores ≥ 1)
        -   `bing` (positive)

    -   Join each with *Emma*'s text and:

        -   Count word frequency.
        -   Filter for frequently occurring words (`n > 50`).
        -   Visualize using a **bar chart** (`ggplot2`) and a **word cloud** (`wordcloud`).

    -   NRC

```{r}
nrc_joy <- get_sentiments("nrc") %>% filter(sentiment == "joy")

emma_nrc_joy <- emma_words %>%
  inner_join(nrc_joy, by = "word") %>%
  count(word, sort = TRUE)

emma_nrc_joy_filtered <- emma_nrc_joy %>% filter(n > 50)

# Bar plot
ggplot(emma_nrc_joy_filtered, aes(x = reorder(word, n), y = n)) +
  geom_col(fill = "skyblue") +
  coord_flip() +
  labs(title = "Joy Words in Emma (NRC)", x = "Word", y = "Frequency")

set.seed(123)
suppressWarnings(
wordcloud(words = emma_nrc_joy$word, freq = emma_nrc_joy$n,
          max.words = 100, colors = brewer.pal(8, "Dark2")))

```

-   AFINN

```{r}
afinn <- get_sentiments("afinn") %>% filter(value >= 1)

emma_afinn <- emma_words %>%
  inner_join(afinn, by = "word") %>%
  count(word, sort = TRUE)

emma_afinn_filtered <- emma_afinn %>% filter(n > 50)

ggplot(emma_afinn_filtered, aes(x = reorder(word, n), y = n)) +
  geom_col(fill = "forestgreen") +
  coord_flip() +
  labs(title = "Positive Words in Emma (AFINN)", x = "Word", y = "Frequency")


set.seed(456)
suppressWarnings(
wordcloud(words = emma_afinn$word, freq = emma_afinn$n,
          max.words = 100, colors = brewer.pal(8, "Dark2")))
```

1.  AFINN

```{r}
bing_positive <- get_sentiments("bing") %>% filter(sentiment == "positive")

emma_bing <- emma_words %>%
  inner_join(bing_positive, by = "word") %>%
  count(word, sort = TRUE)

emma_bing_filtered <- emma_bing %>% filter(n > 50)

ggplot(emma_bing_filtered, aes(x = reorder(word, n), y = n)) +
  geom_col(fill = "goldenrod") +
  coord_flip() +
  labs(title = "Positive Words in Emma (BING)", x = "Word", y = "Frequency")

set.seed(789)
suppressWarnings(wordcloud(words = emma_bing$word, freq = emma_bing$n,
          max.words = 200, colors = brewer.pal(8, "Dark2"))
)


```

1.  **Push to GitHub**

    -   Push your complete R script (`.R` file) to a **GitHub repository**.

    -   Your script should include:

        -   Data wrangling
        -   Sentiment filtering and joins
        -   Visualization code

    -   You must include **at least 5 meaningful commits** to document your workflow.

------------------------------------------------------------------------

## **Rubric 100 Points**

| Category                                       | Points  |
|------------------------------------------------|---------|
| Step 1: Data wrangling (linenumber, chapter)   | 10      |
| Step 2: Tokenization + explanation             | 10      |
| Step 3a: NRC sentiment analysis + plots        | 10      |
| Step 3b: AFINN sentiment analysis + plots      | 10      |
| Step 3c: BING sentiment analysis + plots       | 10      |
| Code readability, structure, and comments      | 10      |
| Word cloud for each lexicon                    | 20      |
| GitHub submission                              |         |
| Commit history (at least 5 meaningful commits) | 20      |
| **Total**                                      | **100** |

Good Luck!
